export function noop() {
}
export function identity(obj) {
    return obj;
}
export function always(obj) {
    return () => obj;
}
export function isString(obj) {
    return typeof obj === 'string';
}
export function isBoolean(obj) {
    return typeof obj === 'boolean';
}
export function isSymbol(obj) {
    return typeof obj === 'symbol';
}
export function isNumber(obj) {
    return typeof obj === 'number';
}
export function isFunction(obj) {
    return typeof obj === 'function';
}
export function isObject(obj) {
    return obj ? typeof obj === 'object' : isFunction(obj);
}
export function isNull(obj) {
    return obj === null;
}
export function isUndefined(obj) {
    return obj === undefined;
}
export var isArray = Array.isArray;
export function isArrayLike(obj) {
    return isObject(obj) && isNumber(obj.length);
}
export function isEmptyArray(obj) {
    return isArray(obj) && obj.length === 0;
}
export var isInteger = Number.isInteger || function (value) {
    return isNumber(value) && isFinite(value) && Math.floor(value) === value;
};
export function ensureArray(value) {
    return isArray(value) ? value : [value];
}
